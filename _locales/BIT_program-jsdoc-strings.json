{
  "Display.Clearscreen": "Display clear",
  "Display.setDisplay": "Display ultrasonic distance",
  "Display.setDisplay2": "Any value displayed on the screen",
  "Display.setDisplay3": "The screen displays the value of the sensor",
  "IR": "IR remote",
  "IR.init": "initialization",
  "IR.onPressEvent": "button pushed.",
  "RGB_light": "RGB light",
  "RGB_light.hicbit_clearLight": "Clear the color of the colored lights and turn off the lights.",
  "RGB_light.hicbit_initRGBLight": "Initialize Light belt",
  "RGB_light.hicbit_setPixelRGB": "Set RGB",
  "RGB_light.hicbit_showLight": "Display the colored lights, and set the color of the colored lights to match the use. After setting the color of the colored lights, the color of the lights must be displayed.",
  "Sensor.hicbit_Rocker1": "Determine the direction of remote sensing.",
  "Sensor.hicbit_SoundSensor": "Set the Sound sensor status,1 detect the sound source,0 no detect the sound source 声音",
  "Sensor.hicbit_avoidSensor": "Get the obstacle avoidance sensor status,1 detect obstacle,0 no detect obstacle 避障判断",
  "Sensor.hicbit_collisionsensor": "Get the collision sensor status,1 trigger,0 no trigger 碰撞",
  "Sensor.hicbit_getDHT11value": "get dht11 temperature and humidity Value",
  "Sensor.hicbit_getGyroscopGeValue": "Get the ad value of the Electronic gyroscope moudule 电子陀螺仪AD",
  "Sensor.hicbit_getKnobValue": "Get the ad value of the knob moudule 旋钮",
  "Sensor.hicbit_getSoundsensorValue": "Get the ad value of the Sound sensor moudule 声音AD",
  "Sensor.hicbit_getavoidSensorValue": "Get the ad value of the avoid Sensor moudule 避障AD",
  "Sensor.hicbit_getphotosensitiveValue": "Get the ad value of the photosensitive moudule 光敏AD",
  "Sensor.hicbit_lineSensorValue": "Buzzer\n//% \nexport function Buzzer(buz: buzzer): void {\nswitch (buz) {\ncase Sensor.buzzer.ring:\npins.digitalWritePin(DigitalPin.P0, 1);\nbreak;\ncase Sensor.buzzer.Not_ringing:\npins.digitalWritePin(DigitalPin.P0, 0);\nbreak;\n}\n}\nGet the line follower sensor port ad value 巡线",
  "Sensor.hicbit_photosensitiveSensor": "Get the Photosensitive sensor status,1 detect bright,0 no detect bright 光敏",
  "Sensor.hicbit_ultrasonic": "Get the distance of ultrasonic detection to the obstacle 超声波",
  "hicbit.hicbit_setCodedmotor": "Set Coded motor , angle of -360~360, that can control turn.",
  "hicbit.hicbit_set_Dual_motor": "Set interface motor1 and motor2 speed , range of -255~255, that can control turn.etc.",
  "hicbit.hicbit_set_Dual_motor|param|port1": "First port, eg: hicbit.hicbit_Port.port1",
  "hicbit.hicbit_set_Dual_motor|param|port2": "The second port, eg: hicbit.hicbit_Port.port2",
  "hicbit.hicbit_set_Single_motor": "Set interface motor speed , range of -255~255, that can control turn.etc.",
  "hicbitRGBColors": "hicbitRGBLight package",
  "hicbitRGBLight": "QbitRGBLight Functions",
  "hicbitRGBLight.LHhicbitRGBLight": "A LHQbitRGBLight class",
  "hicbitRGBPixelMode": "Different modes for RGB or RGB+W RGBLight QbitRGBColors",
  "hicbit_control.getsncode": "Get message increment code(sn).",
  "hicbit_control.hicbit_Arrowkeys": "Set the arrow keys",
  "hicbit_control.hicbit_Init": "hicbit initialization, please execute at boot time",
  "hicbit_control.wait_ms": "Pause for the specified time in milliseconds",
  "hicbit_control.wait_ms|param|ms": "how long to pause for, eg: 100, 200, 500",
  "hicbit_control.wait_s": "Pause for the specified time in seconds",
  "hicbit_control.wait_s|param|s": "how long to pause for, eg: 1, 2, 5, 10, 20,"
}